# General project info
[project]
name = "adsorption_file_parser"
dynamic = ["version"]
description = "Collection of parsers for (nearly) all commercial adsorption instrumentation"
readme = "README.rst"
keywords = ["adsorption", "characterization", "porous materials", "isotherms", "sorption"]
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "AIF Development Team", email = "mail@pauliacomi.com"}
]
dependencies = [
    "python-dateutil",
    "xlrd>=1.1",
    "xlwt>=1.3",
    "openpyxl",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "yapf",
    "isort",
    "pylint",
    "flake8",
    "flake8-pyproject",
    "autopep8",
    "pydocstyle",
    "pre-commit",
]
test = [
    "pytest",
    "pytest-cov",
]

# Other project info
[project.urls]
Homepage = "https://github.com/AIF-development-team/adsorption-file-parser"
Repository = "https://github.com/AIF-development-team/adsorption-file-parser.git"
Documentation = "https://adsorption-file-parser.readthedocs.io"

# Package building
[build-system]
requires = [
    "setuptools>=46.4.0",
    "wheel",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = true
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]

# versioning: setuptools_scm
[tool.setuptools_scm]
write_to = "src/adsorption_file_parser/_version.py"
local_scheme = 'dirty-tag'
fallback_version = '0.0.1'

# linting: flake8
[tool.flake8]
ignore = ["E402", "W503", "W504", "E126", "E731", "E501"]
max-line-length = 140
exclude = [".tox", ".eggs", "ci/templates", "build", "dist"]
docstring_style = "numpy"

# linting: pylint
[tool.pylint.messages_control]
disable = [
    "logging-fstring-interpolation", # fstrings are fast
    "import-outside-toplevel", # required for optimisations
    "wrong-import-position", # often done through code for optimisations
    "too-many-instance-attributes", # we don't need these
    "too-many-branches", # we don't need these
    "too-many-locals", # we don't need these
    "too-many-arguments", # we don't need these
    "too-many-statements", # we don't need these
    "invalid-name", # we don't need these
    "duplicate-code", # sometimes it just has to happen
    "unused-argument", # sometimes it just has to happen
]

# linting: darglint
[tool.darglint]
docstring_style = "numpy"

# linting: pydocstyle
[tool.pydocstyle]
convention = "numpy"
match-dir = "src\\/.*"

# formatting: yapf
[tool.yapf]
based_on_style = "pep8"
dedent_closing_brackets = true
coalesce_brackets = true
split_complex_comprehension = true
split_before_dot = true

# formatting: isort
[tool.isort]
force_single_line = true
line_length = 120
default_section = "THIRDPARTY"
skip = [".tox", ".eggs", "ci/templates", "build", "dist", "src/adsorption_file_parser/_version.py"]

# testing: pytest.py
[tool.pytest.ini_options]
testpaths = [
	"tests",
]
norecursedirs = [
	".git",
	".tox",
	".env",
	"dist",
	"build",
	"migrations",
    ]
python_files = [
	"test_*.py",
	"*_test.py",
    "tests.py",
]
addopts = [
	"-ra",
    "--cov",
    "--cov-report=xml",
	"--doctest-glob=\\*.rst",
	"--tb=short",
]

# testing: coverage.py
[tool.coverage.run]
branch = false
source = [
	"src",
]
omit = [
	"*/tests/*",
]
parallel = true
[tool.coverage.paths]
source = [
	"src",
	"*/site-packages",
]
[tool.coverage.report]
ignore_errors = true
show_missing = true
precision = 1
omit = [
    "*migrations*",
]
exclude_lines = [
	"pragma: no cover",
	"if self.debug",
	"raise AssertionError",
	"raise NotImplementedError",
	"if __name__ == .__main__.",
]
